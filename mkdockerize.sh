#! /bin/sh

PRODUCE_DIR="/mkdocs"
SERVE_DIR="/mkdocs/www"

#echo how to use mkdockerize.sh
mkdockerize_help() {
	echo "mkdockerize produces and serves your local mkdocs directory"
	echo "  * produce"
	echo "    produce command build web assets from your local mkdocs documentation" 
	echo "    and write them out to the stdout a .tar.gz file"
	echo "    For example:"
    echo "        docker run -v <local-path-to-mkdocs-dir>:/mkdocs <the-docker-image-name> produce > output.tar.gz"
	echo "  * serve"
	echo "    serve command read the .tar.gz file produced from the produce command from stdin"
	echo "    and serve it on localhost. For example:"
	echo "        cat <output-from-produce>.tar.gz | docker run -i -p 8000:8000 <the-docker-image-name> serve"
	echo "    Then You can access the documentation on 'http://localhost:8000/'"

}

#if command have failed, then raise error and print mkdockerize_help
error_catch() {
	if [ $? -gt 0 ]; then
		echo "...[ERROR]Some Errors have occurred."
		mkdockerize_help
		exit 1
	fi
}

#The `produce` command writes your local MkDocs documentation to the stdout a .tar.gz file
#which packed web assets generated by mkdocs
produce() {
	cd $PRODUCE_DIR
	mkdocs build -d ./mkdocs_site &> /dev/null
	error_catch
	tar czf - -C mkdocs_site .
}

#The `serve` command reads the .tar.gz file from stdin and serves it on port 8000
serve() {
	mkdir -p $SERVE_DIR
	tar xzf - -C $SERVE_DIR
	error_catch
	cd $SERVE_DIR
	python3 -m http.server 8000
}

case $1 in
	produce)
		produce;;
	serve)
		serve;;
	*)
		mkdockerize_help;;
esac